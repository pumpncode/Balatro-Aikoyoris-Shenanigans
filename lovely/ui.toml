[manifest]
version = "1.2"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """                            game_over = false
            end"""
position = "after"
payload = """
if G.GAME.current_round.advanced_blind then
    if G.GAME.aiko_puzzle_win then
        game_over = false
    else
        game_over = true
    end
elseif G.GAME.akyrs_mathematics_enabled and G.GAME.akyrs_character_stickers_enabled then
    if G.GAME.blind and AKYRS.is_value_within_threshold(G.GAME.blind.chips,G.GAME.chips,G.GAME.akyrs_math_threshold) then
        game_over = false
    else
        game_over = true
    end
end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = """
            G.STATE = G.STATES.NEW_ROUND
"""
position = "after"
payload = """
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = """        G.STATE_COMPLETE = false
        return true
"""
position = "before"
payload = """
if G.GAME.current_round.advanced_blind and G.GAME.aiko_puzzle_win or G.GAME.current_round.hands_left < 1 then
    if G.GAME.aiko_puzzle_win or G.GAME.current_round.hands_left < 1 then
        G.STATE = G.STATES.NEW_ROUND
    else
        G.STATE = G.STATES.DRAW_TO_HAND
    end
elseif G.GAME.akyrs_mathematics_enabled and G.GAME.akyrs_character_stickers_enabled then
    if (G.GAME.blind and AKYRS.is_value_within_threshold(G.GAME.blind.chips,G.GAME.chips,G.GAME.akyrs_math_threshold)) or G.GAME.current_round.hands_left < 1 or AKYRS.does_hand_only_contain_symbols(G.hand) then
        G.STATE = G.STATES.NEW_ROUND
    else
        G.STATE = G.STATES.DRAW_TO_HAND
    end
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """                    table.insert(left_text, {n=G.UIT.O, config={w=1.2,h=1.2 , object = blind_sprite, hover = true, can_collide = false}})"""
position = "after"
payload = """
            if G.GAME.aiko_puzzle_win then
                table.insert(left_text,
                {n=G.UIT.C, config={padding = 0.05, align = 'cm', minw = 4}, nodes={
                    {n=G.UIT.R, config={align = 'cm'}, nodes={
                        {n=G.UIT.O, config={object = DynaText({string = {' '..localize('ph_puzzle_clear')..' '}, colours = {G.C.FILTER}, shadow = true, pop_in = 0, scale = 0.5*scale, silent = true})}}
                    }}
                }}) 
            else
"""
overwrite = true
match_indent = true
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = """                elseif string.find(config.name, 'tag') then
"""
position = "before"
payload = """
        end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """        {n=G.UIT.O, config={object = blind_choice.animation}}
      }},
    }"""
position = "after"
payload = """if (G.GAME.current_round.advanced_blind) then
    score_tab = {
      {n=G.UIT.R, config={align = "cm", minh = 0.6}, nodes={
        {n=G.UIT.O, config={object = DynaText({string = {{string = getGameOverBlindText()}}, colours = {G.C.WHITE},shadow = true, float = true,maxw = 2.2, scale = 0.45})}}
      }},
      {n=G.UIT.R, config={align = "cm", padding = 0.1}, nodes={
        {n=G.UIT.O, config={object = blind_choice.animation}}
      }},
    }

end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.4)
    blind_text[#blind_text + 1] ="""
position = "after"
payload = """
        blind.debuff.special_blind and SPECIAL_BOSSS_BLIND_TOOLTIP(blind,ability_text,stake_sprite,_dollars) or 
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "engine/controller.lua"
pattern = """caps = self.held_keys["lshift"] or self.held_keys["rshift"]"""
position = "at"
payload = """
caps = AKYRS.shift_toggled or self.held_keys["lshift"] or self.held_keys["rshift"]
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "engine/node.lua"
pattern = """            love.graphics.setLineWidth(3)"""
position = "at"
payload = """
            love.graphics.setLineWidth(1)
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        add_round_eval_row({dollars = 0, name='blind1', pitch = pitch, saved = true})"""
position = "before"
payload = """
    if G.GAME.akyrs_mathematics_enabled and G.GAME.akyrs_character_stickers_enabled then 
        add_round_eval_row({dollars = G.GAME.blind.dollars, name='blind1', pitch = pitch})
    else
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = """        add_round_eval_row({dollars = 0, name='blind1', pitch = pitch, saved = true})"""
position = "after"
payload = """
    end
"""
overwrite = true
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """    extras = create_UIBox_blind_tag(type, run_info)"""
position = "before"
payload = """
if not G.GAME.akyrs_no_skips then
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """    extras = create_UIBox_blind_tag(type, run_info)"""
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """        ability_text[1] and {n=G.UIT.R, config={align = "cm", padding = 0.08, colour = mix_colours(blind.boss_colour, G.C.GREY, 0.4), r = 0.1, emboss = 0.05, minw = 2.5, minh = 0.9}, nodes=ability_text} or nil
      }}"""
position = "after"
payload = """
AKYRS.add_blind_extra_info(blind,ability_text,{text_size = 0.25, difficulty_text_size = 0.3, full_ui = true, info_queue = info_queue})
"""
overwrite = true
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """  local run_info_colour = run_info and (blind_state == 'Defeated' and G.C.GREY or blind_state == 'Skipped' and G.C.BLUE or blind_state == 'Upcoming' and G.C.ORANGE or blind_state == 'Current' and G.C.RED or G.C.GOLD)"""
position = "before"
payload = """
AKYRS.add_blind_extra_info(blind_choice.config,blind_desc_nodes,{text_size = 0.25, difficulty_text_size = 0.3,border_size = 0.75})
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = """                            G.HUD_blind:get_UIE_by_ID("HUD_blind_count"):juice_up()"""
position = "before"
payload = """
local akyrs_blind_thing = G.HUD_blind:get_UIE_by_ID("akyrs_blind_attributes")
if akyrs_blind_thing then
    akyrs_blind_thing.states.visible = true
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/overrides.lua"]'
pattern = """	assert(G.HUD_blind == e.UIBox)"""
position = "at"
payload = """"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """    if G.COLLABS.options[suit.key] then
        suitTabs[index] = {
                    label = localize(suit.key, 'suits_plural'),
                    tab_definition_function = G.UIDEF.custom_deck_tab,
                    tab_definition_function_args = suit.key
                }
        index = index + 1
    end"""
position = "before"
payload = """if not suit.akyrs_hidden then"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """    if G.COLLABS.options[suit.key] then
        suitTabs[index] = {
                    label = localize(suit.key, 'suits_plural'),
                    tab_definition_function = G.UIDEF.custom_deck_tab,
                    tab_definition_function_args = suit.key
                }
        index = index + 1
    end"""
position = "after"
payload = """end"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = """              spacing = math.max(0, 0.32*(17 - #assembled_string)),"""
position = "after"
payload = """font = AKYRS.Fonts[part.control.font] and AKYRS.Fonts[part.control.font] or (tonumber(part.control.font) and G.FONTS[tonumber(part.control.font)]),"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = """            spacing = _spacing,"""
position = "after"
payload = """font = AKYRS.Fonts[part.control.font] and AKYRS.Fonts[part.control.font] or (tonumber(part.control.font) and G.FONTS[tonumber(part.control.font)]),"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = """                text = assembled_string,"""
position = "after"
payload = """font = AKYRS.Fonts[part.control.font] and AKYRS.Fonts[part.control.font] or (tonumber(part.control.font) and G.FONTS[tonumber(part.control.font)]),"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = """          text = assembled_string,"""
position = "after"
payload = """font = AKYRS.Fonts[part.control.font] and AKYRS.Fonts[part.control.font] or (tonumber(part.control.font) and G.FONTS[tonumber(part.control.font)]),"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """        self.config.text_drawable = love.graphics.newText(self.config.lang.font.FONT, {G.C.WHITE,self.config.text})"""
position = "before"
payload = """if self.config.font then
    self.config.text_drawable = love.graphics.newText(self.config.font.FONT, {G.C.WHITE,self.config.text})
else
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """        self.config.text_drawable = love.graphics.newText(self.config.lang.font.FONT, {G.C.WHITE,self.config.text})"""
position = "after"
payload = """end"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """            local tx = node.config.lang.font.FONT:getWidth(node.config.text)*node.config.lang.font.squish*scale*G.TILESCALE*node.config.lang.font.FONTSCALE
            local ty = node.config.lang.font.FONT:getHeight()*scale*G.TILESCALE*node.config.lang.font.FONTSCALE*node.config.lang.font.TEXT_HEIGHT_SCALE"""
position = "at"
payload = """
local tx,ty
if node.config.font then
    tx = node.config.font.FONT:getWidth(node.config.text)*node.config.font.squish*scale*G.TILESCALE*node.config.font.FONTSCALE
    ty = node.config.font.FONT:getHeight(node.config.text)*scale*G.TILESCALE*node.config.font.FONTSCALE*node.config.font.TEXT_HEIGHT_SCALE
else
    tx = node.config.lang.font.FONT:getWidth(node.config.text)*node.config.lang.font.squish*scale*G.TILESCALE*node.config.lang.font.FONTSCALE
    ty = node.config.lang.font.FONT:getHeight()*scale*G.TILESCALE*node.config.lang.font.FONTSCALE*node.config.lang.font.TEXT_HEIGHT_SCALE
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """            self.ARGS.text_parallax.sx = -self.shadow_parrallax.x*0.5/(self.config.scale*self.config.lang.font.FONTSCALE)
            self.ARGS.text_parallax.sy = -self.shadow_parrallax.y*0.5/(self.config.scale*self.config.lang.font.FONTSCALE)"""
position = "before"
payload = """
if self.config.font then
    self.ARGS.text_parallax.sx = -self.shadow_parrallax.x*0.5/(self.config.scale*self.config.font.FONTSCALE)
    self.ARGS.text_parallax.sy = -self.shadow_parrallax.y*0.5/(self.config.scale*self.config.font.FONTSCALE)
else
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """            self.ARGS.text_parallax.sx = -self.shadow_parrallax.x*0.5/(self.config.scale*self.config.lang.font.FONTSCALE)
            self.ARGS.text_parallax.sy = -self.shadow_parrallax.y*0.5/(self.config.scale*self.config.lang.font.FONTSCALE)"""
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """                    love.graphics.setColor(0, 0, 0, 0.3*self.config.colour[4])
                    love.graphics.draw(
                        self.config.text_drawable,
                        (self.config.lang.font.TEXT_OFFSET.x + (self.config.vert and -self.ARGS.text_parallax.sy or self.ARGS.text_parallax.sx))*(self.config.scale or 1)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        (self.config.lang.font.TEXT_OFFSET.y + (self.config.vert and self.ARGS.text_parallax.sx or self.ARGS.text_parallax.sy))*(self.config.scale or 1)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        0,
                        (self.config.scale)*self.config.lang.font.squish*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        (self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE
                    )"""
position = "before"
payload = """
if self.config.font then
    love.graphics.setColor(0, 0, 0, 0.3*self.config.colour[4])
    love.graphics.draw(
        self.config.text_drawable,
        (self.config.font.TEXT_OFFSET.x + (self.config.vert and -self.ARGS.text_parallax.sy or self.ARGS.text_parallax.sx))*(self.config.scale or 1)*self.config.font.FONTSCALE/G.TILESIZE,
        (-self.config.font.FONTSCALE+self.config.font.TEXT_OFFSET.y + (self.config.vert and self.ARGS.text_parallax.sx or self.ARGS.text_parallax.sy))*(self.config.scale or 1)*self.config.font.FONTSCALE/G.TILESIZE,
        0,
        (self.config.scale)*self.config.font.squish*self.config.font.FONTSCALE/G.TILESIZE,
        (self.config.scale)*self.config.font.FONTSCALE/G.TILESIZE
    )
else
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """                    love.graphics.setColor(0, 0, 0, 0.3*self.config.colour[4])
                    love.graphics.draw(
                        self.config.text_drawable,
                        (self.config.lang.font.TEXT_OFFSET.x + (self.config.vert and -self.ARGS.text_parallax.sy or self.ARGS.text_parallax.sx))*(self.config.scale or 1)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        (self.config.lang.font.TEXT_OFFSET.y + (self.config.vert and self.ARGS.text_parallax.sx or self.ARGS.text_parallax.sy))*(self.config.scale or 1)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        0,
                        (self.config.scale)*self.config.lang.font.squish*self.config.lang.font.FONTSCALE/G.TILESIZE,
                        (self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE
                    )"""
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """            love.graphics.draw(
                self.config.text_drawable,
                self.config.lang.font.TEXT_OFFSET.x*(self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                self.config.lang.font.TEXT_OFFSET.y*(self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                0,
                (self.config.scale)*self.config.lang.font.squish*self.config.lang.font.FONTSCALE/G.TILESIZE,
                (self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE
            )"""
position = "before"
payload = """
if self.config.font then
    love.graphics.draw(
        self.config.text_drawable,
        self.config.font.TEXT_OFFSET.x*(self.config.scale)*self.config.font.FONTSCALE/G.TILESIZE,
        self.config.font.TEXT_OFFSET.y*(self.config.scale)*self.config.font.FONTSCALE/G.TILESIZE,
        0,
        (self.config.scale)*self.config.font.squish*self.config.font.FONTSCALE/G.TILESIZE,
        (self.config.scale)*self.config.font.FONTSCALE/G.TILESIZE
    )
else
"""
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = """            love.graphics.draw(
                self.config.text_drawable,
                self.config.lang.font.TEXT_OFFSET.x*(self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                self.config.lang.font.TEXT_OFFSET.y*(self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE,
                0,
                (self.config.scale)*self.config.lang.font.squish*self.config.lang.font.FONTSCALE/G.TILESIZE,
                (self.config.scale)*self.config.lang.font.FONTSCALE/G.TILESIZE
            )"""
position = "after"
payload = """
end
"""
overwrite = true
match_indent = true
